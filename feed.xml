<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://echocho.github.io/cat-alone/feed.xml" rel="self" type="application/atom+xml" /><link href="https://echocho.github.io/cat-alone/" rel="alternate" type="text/html" /><updated>2025-04-20T07:00:37+00:00</updated><id>https://echocho.github.io/cat-alone/feed.xml</id><title type="html">Echocho’s Blog</title><subtitle>Thoughts on Tech, Systems, Life, and Books</subtitle><author><name>Echocho</name></author><entry><title type="html">Designing Logs for Better Observability</title><link href="https://echocho.github.io/cat-alone/tech/2025/04/20/designing-logs-for-better-observability-and-faster-troubleshooting.html" rel="alternate" type="text/html" title="Designing Logs for Better Observability" /><published>2025-04-20T00:00:00+00:00</published><updated>2025-04-20T00:00:00+00:00</updated><id>https://echocho.github.io/cat-alone/tech/2025/04/20/designing-logs-for-better-observability-and-faster-troubleshooting</id><content type="html" xml:base="https://echocho.github.io/cat-alone/tech/2025/04/20/designing-logs-for-better-observability-and-faster-troubleshooting.html"><![CDATA[<h1 id="designing-logs-for-better-observability-and-faster-troubleshooting">Designing Logs for Better Observability and Faster Troubleshooting</h1>

<h2 id="system-architecture">System Architecture</h2>

<p>The overall system architecture is composed of three main parts:
<img src="/assets/images/logging-system-diagram.png" alt="logging-system-diagram.png" /></p>

<p><strong>Part 1: Upstream Services and Snapshot Generation</strong><br />
This layer includes “Service 1”, “Service 2”, “Service 3”, and “Service 4”, all responsible for handling end-user requests. These requests typically represent business transactions, such as purchasing a book or subscribing to a service.<br />
Each transaction is sent to the <strong>Transaction Snapshot Service</strong> for further processing via ActiveMQ, using the message type <code class="language-plaintext highlighter-rouge">"TransactionGenerated"</code>.<br />
Processed transaction data — such as <code class="language-plaintext highlighter-rouge">accountId</code>, <code class="language-plaintext highlighter-rouge">transactionType</code>, <code class="language-plaintext highlighter-rouge">transactionDate</code>, <code class="language-plaintext highlighter-rouge">revenueAmount</code>, and <code class="language-plaintext highlighter-rouge">transactionPreference</code> — is then streamed to the downstream processor via Kafka.</p>

<p><strong>Part 2: Transaction Snapshot Processor</strong><br />
This microservice listens to Kafka topics, ingests transaction snapshots, parses them, and inserts the parsed data into the downstream service’s database.</p>

<p><strong>Part 3: Downstream Services</strong><br />
This layer consists of the data store where the <strong>Data Ingestion Service</strong> writes incoming transaction data. It also supports the web UI that end users interact with.</p>

<h2 id="logging-format-design-principles">Logging Format Design Principles</h2>

<p>When designing your logging format, focus on the system’s key operations, anticipate potential issues, and think carefully about what needs to be monitored.</p>

<h3 id="a-counterexample">A Counterexample</h3>

<p>I’ve seen cases where engineers, without a clear design principle, ended up adding verbose, low-value logs, similar to local debugging outputs, such as:</p>

<table>
  <thead>
    <tr>
      <th>Time</th>
      <th>Message</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>04/19/2025 18:06:47.152</td>
      <td>Transaction Event execution time: 20</td>
    </tr>
    <tr>
      <td>04/19/2025 18:06:47.152</td>
      <td>Time taken to make insertion: 17</td>
    </tr>
    <tr>
      <td>04/19/2025 18:06:47.147</td>
      <td>Time taken to make db insertion: 11 TxnSource : ORDER</td>
    </tr>
    <tr>
      <td>04/19/2025 18:06:47.135</td>
      <td>Time taken to getConnection: 3</td>
    </tr>
    <tr>
      <td>04/19/2025 18:06:47.135</td>
      <td>after getting db connection</td>
    </tr>
    <tr>
      <td>…</td>
      <td>…</td>
    </tr>
  </tbody>
</table>

<p><strong>Problems with this approach:</strong></p>
<ul>
  <li>Floods the system with excessive logs</li>
  <li>Degrades query performance</li>
  <li>Makes it harder to efficiently locate relevant information during incidents</li>
</ul>

<hr />

<h3 id="key-logging-design-principles">Key Logging Design Principles</h3>

<ul>
  <li>
    <p><strong>Monitoring requirements should drive the structure and content of your logs:</strong><br />
Otherwise, it becomes extremely difficult to leverage them effectively during troubleshooting.</p>
  </li>
  <li>
    <p><strong>Use a consistent log format:</strong><br />
Ensure fields like event code, event duration, labels, and log levels have consistent meanings across all modules. Otherwise, during an incident, you’ll waste time searching through unfamiliar or inconsistent logs.</p>
  </li>
  <li>
    <p><strong>Leverage index fields for faster querying:</strong><br />
Especially when using tools like Kibana, good indexing is critical for loading dashboards efficiently. Relying solely on full-text search over several months of data can easily cause timeouts.</p>
  </li>
</ul>

<h2 id="key-problems-and-questions-to-address">Key Problems and Questions to Address</h2>

<p>The <strong>core guarantee</strong> of this system is that every transaction generated upstream must be reliably persisted in the downstream database — <strong>without data loss</strong>.</p>

<p>This leads to two critical questions:</p>
<ol>
  <li><strong>How can we detect if data loss has occurred?</strong></li>
  <li><strong>If a customer reports missing data, how can we quickly identify at which stage the data was lost?</strong></li>
</ol>

<p>Given the system’s asynchronous nature, we must monitor:</p>
<ul>
  <li>Overall (end-to-end) latency</li>
  <li>Stage-by-stage latency</li>
  <li>Error occurrences and types</li>
</ul>

<p>Additionally, we need to organize errors smartly to decide on proper responses.</p>

<h2 id="designing-a-logging-format-to-solve-these-problems">Designing a Logging Format to Solve These Problems</h2>

<h3 id="1-how-can-we-detect-if-data-loss-has-occurred">1. How can we detect if data loss has occurred?</h3>

<ul>
  <li>Log the transaction ID immediately when a transaction is generated.</li>
  <li>Log the transaction ID again after successful insertion into the database.<br />
By comparing the two sets of IDs, we can easily identify any lost transactions.</li>
</ul>

<h3 id="2-how-can-we-quickly-identify-at-which-stage-data-was-lost">2. How can we quickly identify at which stage data was lost?</h3>

<ul>
  <li>At each processing stage, log:
    <ul>
      <li>The transaction ID</li>
      <li>The processing outcome (success/failure)</li>
    </ul>
  </li>
  <li>Implement a <strong>Trace ID</strong> that spans all stages to chain related activities together.<br />
With a Trace ID, we can filter logs to easily see the full lifecycle of a transaction.</li>
</ul>

<h3 id="3-how-can-we-monitor-system-latency-overall-and-per-stage">3. How can we monitor system latency (overall and per stage)?</h3>

<ul>
  <li>
    <p><strong>Within Transaction Snapshot Service:</strong><br />
Break down snapshot generation into phases (e.g., context preparation, discount calculation, revenue calculation, Kafka publish).<br />
Use a <code class="language-plaintext highlighter-rouge">ThreadLocal</code> to capture latency per phase.</p>
  </li>
  <li>
    <p><strong>End-to-End Latency:</strong><br />
Capture the timestamp when a transaction is generated and when it is inserted downstream. The difference gives the overall latency.</p>
  </li>
</ul>

<h3 id="4-how-should-we-monitor-and-organize-errors">4. How should we monitor and organize errors?</h3>

<p>Errors typically fall into three categories:</p>
<ul>
  <li><strong>Neglectable:</strong> Caused by user misconfiguration; no action needed.</li>
  <li><strong>Retriable:</strong> Temporary issues like DB lock contention; can be automatically retried.</li>
  <li><strong>Non-retriable:</strong> Critical issues requiring engineering investigation.</li>
</ul>

<p>Standardize error logs with fields like <code class="language-plaintext highlighter-rouge">log.level</code> and <code class="language-plaintext highlighter-rouge">event.severity</code>:</p>
<ul>
  <li><strong>Non-retriable error:</strong> <code class="language-plaintext highlighter-rouge">level=error</code>, <code class="language-plaintext highlighter-rouge">event.severity=error (3)</code></li>
  <li><strong>Retriable error:</strong> <code class="language-plaintext highlighter-rouge">level=error</code>, <code class="language-plaintext highlighter-rouge">event.severity=warn (4)</code></li>
  <li><strong>Neglectable error:</strong> <code class="language-plaintext highlighter-rouge">level=warn</code>, <code class="language-plaintext highlighter-rouge">event.severity=notice (5)</code></li>
</ul>

<h2 id="final-thoughts">Final Thoughts</h2>

<p>Designing good logging is not just about “what happened” — it’s about enabling observability, rapid troubleshooting, and ultimately ensuring system reliability.<br />
Start by defining <strong>what you need to monitor</strong> — then build your logs around that.</p>]]></content><author><name>Echocho</name></author><category term="Tech" /><category term="logging" /><category term="observability" /><category term="troubleshooting" /><summary type="html"><![CDATA[How to design better log formats for better observability and faster troubleshooting in distributed systems.]]></summary></entry><entry><title type="html">Different Testing In Java</title><link href="https://echocho.github.io/cat-alone/2023/04/18/different-testing-in-java.html" rel="alternate" type="text/html" title="Different Testing In Java" /><published>2023-04-18T00:00:00+00:00</published><updated>2023-04-18T00:00:00+00:00</updated><id>https://echocho.github.io/cat-alone/2023/04/18/different-testing-in-java</id><content type="html" xml:base="https://echocho.github.io/cat-alone/2023/04/18/different-testing-in-java.html"><![CDATA[<h1 id="different-kinds-of-testing">Different Kinds of Testing</h1>
<p>This note distinguishes several common testings, how to conduct the tests in general, and when to use them.</p>
<ol>
  <li>benchmark testing</li>
  <li>load testing</li>
  <li>performance testing</li>
  <li>concurrency testing</li>
  <li>scalability testing</li>
  <li>stress testing</li>
</ol>

<h2 id="benchmark-testing">Benchmark Testing</h2>
<p>It’s normal part of a development life cycle. Unlike load testing which focuses more on the system performance as a whole, benchmark testing is lower level. For instance, with benchmark testing, we are usually interested in method runtime, database response time, or the number of requests that can be handled within some timeframe, such as 1 second, in typical use cases. Benchmark testing is performed to determine current behavior and performance of a system and is used for a baseline to decide if and to what extent the software/application is enhanced or improved.</p>

<h3 id="reference">Reference:</h3>
<p>https://www.ibm.com/docs/ko/db2/10.5?topic=methodology-benchmark-testing
https://www.guru99.com/benchmark-testing.html</p>

<h2 id="load-testing">Load Testing</h2>
<p>It’s the process of <a href="https://loadninja.com/load-testing/#:~:text=Load%20testing%20is%20the%20process,it's%20behavior%20under%20various%20conditions.">putting simulated demand on software, an application or website in a way that tests or demonstrates it’s behavior under various conditions</a>. Usually, you a clear target or goal for your software or application, and you do load testing to see if the systems match your expectation.</p>

<h2 id="performance-testing">Performance Testing</h2>
<p>This kind of testing is performed to determine how the stability, scalability, speed and responsiveness of an application/software holds up under a give workload. Common metrics are throughput and transaction per second (TPS). Performance testing is and should be iterative. It’s common to find people do performance testing only in an afterthought. However, it’s highly recommended to provide performance test result at each release, or even better, include performance testing in CI. It’s useful in that we can check if engineers make mistake in their code to hamper the software performance, e.g. high time-complexity code, SQL n+1 problem. You’ll also find it handy when you need to consider if a product requirement is reasonable, in that if it’ll greatly slows down the application.</p>

<h2 id="concurrency-testing">Concurrency Testing</h2>
<p>[TODO] 
tomcat connection pool max number, what concurrency comes max tsp, concurrency -response time
think about database pool size, tomcat connection pool size, etc
JVM tuning: most of them are to handle full GC - stop the world</p>

<h2 id="stresstorture-testing">Stress/Torture Testing</h2>
<p>We do stress/torture testing to understand how software/ application behaves under extreme level of stress, or pressure. One example is we have requests run for a long time, such as weeks and months and see if anything goes wrong, e.g. OOM. Another example is sending requests in higher concurrency than the max number a system can normally handle and see if and how transactions terminates and rollback.</p>

<h3 id="reference-1">Reference</h3>
<p>https://www.guru99.com/stress-testing-tutorial.html</p>

<h2 id="scalability-testing">Scalability Testing</h2>
<p>[TODO]
1 concurrency, tps 1, good 10 concurrency, tps 10, etc. (if 10, 1, means lock)</p>

<h2 id="further-reading">Further Reading</h2>
<p>https://octoperf.com/blog/2017/10/19/how-to-analyze-jmeter-results/#installation</p>]]></content><author><name>Echocho</name></author><summary type="html"><![CDATA[Different Kinds of Testing This note distinguishes several common testings, how to conduct the tests in general, and when to use them. benchmark testing load testing performance testing concurrency testing scalability testing stress testing]]></summary></entry><entry><title type="html">Mysql Literal Instant Time</title><link href="https://echocho.github.io/cat-alone/2023/04/08/mysql-literal-instant-time.html" rel="alternate" type="text/html" title="Mysql Literal Instant Time" /><published>2023-04-08T00:00:00+00:00</published><updated>2023-04-08T00:00:00+00:00</updated><id>https://echocho.github.io/cat-alone/2023/04/08/mysql-literal-instant-time</id><content type="html" xml:base="https://echocho.github.io/cat-alone/2023/04/08/mysql-literal-instant-time.html"><![CDATA[<h1 id="literal-vs-instant-time-value">Literal vs Instant Time Value</h1>

<p>Generally, there are two types of format for time in the Java world: literal and instant. Sometimes it’s puzzling regarding the difference between these two and when to use literal or instant in our software system and DB storage.</p>

<h2 id="what-is-a-literal">What is a literal?</h2>
<p>Literal represents a date and a time-of-day, without a time zone. It remains the same for users in different time zones. Like Christmas, it’s always December 25 no matter where you are. With that said, literal doesn’t represent a moment, but only <a href="https://stackoverflow.com/questions/32437550/whats-the-difference-between-instant-and-localdatetime">a potential moments along a range of about 26-27 hours, the range of all time zones around the globe</a>. Some examples of literals are “2023-01-01”, “2023-01-01 09:00:02”.</p>

<h2 id="what-is-an-instant">What is an instant?</h2>
<p>An Instant, or <a href="https://currentmillis.com/">Epoch</a>, is a moment on the timeline in UTC,  the number of nanoseconds that have elapsed since 1970-01-01 00:00:00 in UTC. It represents a unambiguous, concrete moment. It can have different literal values in different time zone. For example, Instant 1680962401065 can be converted to “2023-04-08 22:00:01 CST”, or “2023-04-08 14:00:01 UTC”.</p>

<h2 id="how-does-mysql-save-time">How does MySQL save time?</h2>
<p>MySQL saves <code class="language-plaintext highlighter-rouge">DATE</code> and <code class="language-plaintext highlighter-rouge">DATETIME</code> types in literal format. Data are encoded into 5 bytes, with no time zone info. <code class="language-plaintext highlighter-rouge">TIMESTAMP</code>, however, is saved with Epoch value, 4 bytes when no fraction. MySQL converts <code class="language-plaintext highlighter-rouge">TIMESTAMP</code> values from the current time zone to UTC for storage, and converts it to current time zone for retrieval. One thing to note is that we need to make sure the same time zone is used for conversion in both directions.  Otherwise, the value retrieved will be different from what’s stored.</p>

<h2 id="reference">Reference:</h2>
<p>https://dev.mysql.com/doc/refman/8.0/en/datetime.html</p>]]></content><author><name>Echocho</name></author><summary type="html"><![CDATA[Literal vs Instant Time Value]]></summary></entry><entry><title type="html">Mysql Common Misunderstanding</title><link href="https://echocho.github.io/cat-alone/2023/03/28/mysql-common-misunderstanding.html" rel="alternate" type="text/html" title="Mysql Common Misunderstanding" /><published>2023-03-28T00:00:00+00:00</published><updated>2023-03-28T00:00:00+00:00</updated><id>https://echocho.github.io/cat-alone/2023/03/28/mysql-common-misunderstanding</id><content type="html" xml:base="https://echocho.github.io/cat-alone/2023/03/28/mysql-common-misunderstanding.html"><![CDATA[<h1 id="some-common-misunderstandings-of-mysql">Some Common Misunderstandings of MySQL</h1>

<h2 id="misunderstanding-1-conversion-between-utc-and-non-utc-timezones-are-one-to-one">Misunderstanding 1: Conversion between UTC and non-UTC timezones are one-to-one</h2>
<p>In MySQL, temporal values are stored in <code class="language-plaintext highlighter-rouge">timestamp</code> as UTC values. When inserting and retrieving <code class="language-plaintext highlighter-rouge">timestamp</code> columns, if session time zone is not in UTC, there will be convertsion between UTC and session time zone.
Due to local time zone changes like Daylight Saving Time, conversions between UTC and non-UTC time zones are not one-to-one in both directions.
For example, two distinct UTC timestamps are not unique in MET timezone.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">tztable</span> <span class="p">(</span><span class="n">ts</span> <span class="nb">TIMESTAMP</span><span class="p">);</span>
<span class="c1">-- insert UTC values</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SET</span> <span class="n">time_zone</span> <span class="o">=</span> <span class="s1">'UTC'</span><span class="p">;</span> 
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">tztable</span> <span class="k">VALUES</span>
       <span class="p">(</span><span class="s1">'2018-10-28 00:30:00'</span><span class="p">),</span>
       <span class="p">(</span><span class="s1">'2018-10-28 01:30:00'</span><span class="p">);</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">ts</span> <span class="k">FROM</span> <span class="n">tztable</span><span class="p">;</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="n">ts</span>                  <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">00</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">01</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SET</span> <span class="n">time_zone</span> <span class="o">=</span> <span class="s1">'MET'</span><span class="p">;</span> <span class="c1">-- retrieve non-UTC values</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">ts</span> <span class="k">FROM</span> <span class="n">tztable</span><span class="p">;</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="n">ts</span>                  <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">02</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">02</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>

</code></pre></div></div>

<p>Comparison of UTC and non-UTC timezones may yield different results, depending on if it is an indexed or nonindexed lookup.
If there’s no usable index on the <code class="language-plaintext highlighter-rouge">timestamp</code> column, comparison occurs in the session timezone. Specifically, the optimizer</p>
<ol>
  <li>first performs a table scan,</li>
  <li>retrieves all <code class="language-plaintext highlighter-rouge">ts</code> values,</li>
  <li>converts timestamp values from UTC to session time zone,</li>
  <li>compares them with the searched value.
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">ts</span> <span class="k">FROM</span> <span class="n">tztable</span> <span class="k">where</span> <span class="n">ts</span> <span class="o">=</span> <span class="s1">'2018-10-28 02:30:00'</span><span class="p">;</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="n">ts</span>                  <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">02</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">02</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
</code></pre></div>    </div>
  </li>
</ol>

<p>If there’s a usable index on the <code class="language-plaintext highlighter-rouge">timestamp</code> column, comparison occur in UTC. The optimizer does the following:</p>
<ol>
  <li>first performs an index scan,</li>
  <li>converts the search value from the session time zone to UTC,</li>
  <li>compares the result to the UTC index entries
    <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">tstable</span> <span class="k">ADD</span> <span class="k">INDEX</span> <span class="p">(</span><span class="n">ts</span><span class="p">);</span>
<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="n">ts</span> <span class="k">FROM</span> <span class="n">tstable</span>
    <span class="k">WHERE</span> <span class="n">ts</span> <span class="o">=</span> <span class="s1">'2018-10-28 02:30:00'</span><span class="p">;</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="n">ts</span>                  <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
<span class="o">|</span> <span class="mi">2018</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">28</span> <span class="mi">02</span><span class="p">:</span><span class="mi">30</span><span class="p">:</span><span class="mi">00</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------------------+</span>
</code></pre></div>    </div>
  </li>
</ol>

<p><em>Reference</em>
https://dev.mysql.com/doc/refman/8.0/en/timestamp-lookups.html</p>

<h2 id="misunderstanding-2-comparing-dissimilar-columns-is-at-no-cost">Misunderstanding 2: Comparing dissimilar columns is at no cost</h2>
<p>Let’s start with a sample table.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">test</span><span class="p">.</span><span class="n">teacher</span><span class="p">;</span>
<span class="o">+</span><span class="c1">--------+-------+-----+-------------+------------+</span>
<span class="o">|</span> <span class="n">id</span>     <span class="o">|</span> <span class="n">name</span>  <span class="o">|</span> <span class="n">age</span> <span class="o">|</span> <span class="n">contract_id</span> <span class="o">|</span> <span class="n">join_on</span>    <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+-------+-----+-------------+------------+</span>
<span class="o">|</span> <span class="mi">100000</span> <span class="o">|</span> <span class="n">john</span>  <span class="o">|</span>  <span class="mi">30</span> <span class="o">|</span> <span class="mi">100000</span>      <span class="o">|</span> <span class="mi">2023</span><span class="o">-</span><span class="mi">01</span><span class="o">-</span><span class="mi">01</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">100001</span> <span class="o">|</span> <span class="n">hanna</span> <span class="o">|</span>  <span class="mi">35</span> <span class="o">|</span> <span class="mi">100200</span>      <span class="o">|</span> <span class="mi">2023</span><span class="o">-</span><span class="mi">02</span><span class="o">-</span><span class="mi">01</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">100003</span> <span class="o">|</span> <span class="n">mary</span>  <span class="o">|</span>  <span class="mi">70</span> <span class="o">|</span> <span class="mi">100300</span>      <span class="o">|</span> <span class="mi">2023</span><span class="o">-</span><span class="mi">03</span><span class="o">-</span><span class="mi">01</span> <span class="o">|</span>
<span class="o">|</span> <span class="mi">100004</span> <span class="o">|</span> <span class="n">peter</span> <span class="o">|</span>  <span class="mi">66</span> <span class="o">|</span> <span class="mi">100400</span>      <span class="o">|</span> <span class="mi">2023</span><span class="o">-</span><span class="mi">04</span><span class="o">-</span><span class="mi">01</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">--------+-------+-----+-------------+------------+</span>
<span class="mi">4</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>

<span class="n">mysql</span><span class="o">&gt;</span> <span class="k">DESCRIBE</span> <span class="n">test</span><span class="p">.</span><span class="n">teacher</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------------+-------------+------+-----+---------+-------+</span>
<span class="o">|</span> <span class="n">Field</span>       <span class="o">|</span> <span class="k">Type</span>        <span class="o">|</span> <span class="k">Null</span> <span class="o">|</span> <span class="k">Key</span> <span class="o">|</span> <span class="k">Default</span> <span class="o">|</span> <span class="n">Extra</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------+-------------+------+-----+---------+-------+</span>
<span class="o">|</span> <span class="n">id</span>          <span class="o">|</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="o">|</span> <span class="k">NO</span>   <span class="o">|</span> <span class="n">PRI</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span>       <span class="o">|</span>
<span class="o">|</span> <span class="n">name</span>        <span class="o">|</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">30</span><span class="p">)</span> <span class="o">|</span> <span class="k">NO</span>   <span class="o">|</span>     <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span>       <span class="o">|</span>
<span class="o">|</span> <span class="n">age</span>         <span class="o">|</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span>     <span class="o">|</span> <span class="k">NO</span>   <span class="o">|</span>     <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span>       <span class="o">|</span>
<span class="o">|</span> <span class="n">contract_id</span> <span class="o">|</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="o">|</span> <span class="k">NO</span>   <span class="o">|</span> <span class="n">MUL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span>       <span class="o">|</span>
<span class="o">|</span> <span class="n">join_on</span>     <span class="o">|</span> <span class="nb">date</span>        <span class="o">|</span> <span class="n">YES</span>  <span class="o">|</span>     <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">-------------+-------------+------+-----+---------+-------+</span>
<span class="mi">5</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div></div>
<p>Note the type of <code class="language-plaintext highlighter-rouge">contract_id</code> is <code class="language-plaintext highlighter-rouge">varchar</code> as you can see in <code class="language-plaintext highlighter-rouge">DESCRIBE</code>.
It’s not uncommon to see query like <code class="language-plaintext highlighter-rouge">SELECT * FROM test.teacher WHERE contract_id = 100400;</code>, where it compares a string column to a numeric literal. This, however, prevent use of indexes if values cannot be compared directly without conversion. Think about it, For a given value such as 1 in the numeric column, it might compare equal to any number of values in the string column such as ‘1’, ‘ 1’, ‘00001’, or ‘01.e1’. This means the potentially all values need to be compared.</p>

<p>We can understand better with <code class="language-plaintext highlighter-rouge">EXPLAIN</code> statement. Even though there are possible index <code class="language-plaintext highlighter-rouge">contract_id</code>, it is not used. The value for <code class="language-plaintext highlighter-rouge">row</code> column is 4 so we know that the optimizer does a full table scan and compares the value one by one.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">EXPLAIN</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">test</span><span class="p">.</span><span class="n">teacher</span> <span class="k">where</span> <span class="n">contract_id</span> <span class="o">=</span> <span class="mi">100400</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span>   <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>  <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span>       <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">teacher</span> <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ALL</span>  <span class="o">|</span> <span class="n">contract_id</span>   <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NULL</span>    <span class="o">|</span> <span class="k">NULL</span> <span class="o">|</span>    <span class="mi">4</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">Using</span> <span class="k">where</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+---------+------------+------+---------------+------+---------+------+------+----------+-------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">3</span> <span class="n">warnings</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">SHOW WARNINGS</code> statement right after <code class="language-plaintext highlighter-rouge">EXPLAIN</code> provides detailed information regarding this collation conversion.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SHOW</span> <span class="n">WARNINGS</span><span class="p">;</span>
<span class="o">+</span><span class="c1">---------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="o">|</span> <span class="k">Level</span>   <span class="o">|</span> <span class="n">Code</span> <span class="o">|</span> <span class="n">Message</span>                                                                                                                                                                                                                                                                             <span class="o">|</span>
<span class="o">+</span><span class="c1">---------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="o">|</span> <span class="n">Warning</span> <span class="o">|</span> <span class="mi">1739</span> <span class="o">|</span> <span class="n">Cannot</span> <span class="n">use</span> <span class="k">ref</span> <span class="k">access</span> <span class="k">on</span> <span class="k">index</span> <span class="s1">'contract_id'</span> <span class="n">due</span> <span class="k">to</span> <span class="k">type</span> <span class="k">or</span> <span class="k">collation</span> <span class="k">conversion</span> <span class="k">on</span> <span class="n">field</span> <span class="s1">'contract_id'</span>                                                                                                                                                                             <span class="o">|</span>
<span class="o">|</span> <span class="n">Warning</span> <span class="o">|</span> <span class="mi">1739</span> <span class="o">|</span> <span class="n">Cannot</span> <span class="n">use</span> <span class="k">range</span> <span class="k">access</span> <span class="k">on</span> <span class="k">index</span> <span class="s1">'contract_id'</span> <span class="n">due</span> <span class="k">to</span> <span class="k">type</span> <span class="k">or</span> <span class="k">collation</span> <span class="k">conversion</span> <span class="k">on</span> <span class="n">field</span> <span class="s1">'contract_id'</span>                                                                                                                                                                           <span class="o">|</span>
<span class="o">|</span> <span class="n">Note</span>    <span class="o">|</span> <span class="mi">1003</span> <span class="o">|</span> <span class="cm">/* select#1 */</span> <span class="k">select</span> <span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`id`</span> <span class="k">AS</span> <span class="nv">`id`</span><span class="p">,</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`name`</span> <span class="k">AS</span> <span class="nv">`name`</span><span class="p">,</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`age`</span> <span class="k">AS</span> <span class="nv">`age`</span><span class="p">,</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`contract_id`</span> <span class="k">AS</span> <span class="nv">`contract_id`</span><span class="p">,</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`join_on`</span> <span class="k">AS</span> <span class="nv">`join_on`</span> <span class="k">from</span> <span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span> <span class="k">where</span> <span class="p">(</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`contract_id`</span> <span class="o">=</span> <span class="mi">100400</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">---------+------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="mi">3</span> <span class="k">rows</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div></div>

<p>If we compare column <code class="language-plaintext highlighter-rouge">contract_id</code> with a string (the same data type), the optimizer would be able to use the index and gives the result very efficiently: see column <code class="language-plaintext highlighter-rouge">rows</code> which indicates that the optimizer is able to locate the exact one row that meets the requirement.</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">EXPLAIN</span> <span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">test</span><span class="p">.</span><span class="n">teacher</span> <span class="k">where</span> <span class="n">contract_id</span> <span class="o">=</span> <span class="s1">'100400'</span><span class="p">;</span>
<span class="o">+</span><span class="c1">----+-------------+---------+------------+------+---------------+-------------+---------+-------+------+----------+-------+</span>
<span class="o">|</span> <span class="n">id</span> <span class="o">|</span> <span class="n">select_type</span> <span class="o">|</span> <span class="k">table</span>   <span class="o">|</span> <span class="n">partitions</span> <span class="o">|</span> <span class="k">type</span> <span class="o">|</span> <span class="n">possible_keys</span> <span class="o">|</span> <span class="k">key</span>         <span class="o">|</span> <span class="n">key_len</span> <span class="o">|</span> <span class="k">ref</span>   <span class="o">|</span> <span class="k">rows</span> <span class="o">|</span> <span class="n">filtered</span> <span class="o">|</span> <span class="n">Extra</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+---------+------------+------+---------------+-------------+---------+-------+------+----------+-------+</span>
<span class="o">|</span>  <span class="mi">1</span> <span class="o">|</span> <span class="k">SIMPLE</span>      <span class="o">|</span> <span class="n">teacher</span> <span class="o">|</span> <span class="k">NULL</span>       <span class="o">|</span> <span class="k">ref</span>  <span class="o">|</span> <span class="n">contract_id</span>   <span class="o">|</span> <span class="n">contract_id</span> <span class="o">|</span> <span class="mi">22</span>      <span class="o">|</span> <span class="n">const</span> <span class="o">|</span>    <span class="mi">1</span> <span class="o">|</span>   <span class="mi">100</span><span class="p">.</span><span class="mi">00</span> <span class="o">|</span> <span class="k">NULL</span>  <span class="o">|</span>
<span class="o">+</span><span class="c1">----+-------------+---------+------------+------+---------------+-------------+---------+-------+------+----------+-------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span><span class="p">,</span> <span class="mi">1</span> <span class="n">warning</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div></div>
<p>We won’t see similar warning like the above query:</p>
<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mysql</span><span class="o">&gt;</span> <span class="k">SHOW</span> <span class="n">WARNINGS</span><span class="p">;</span>
<span class="o">+</span><span class="c1">-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="o">|</span> <span class="k">Level</span> <span class="o">|</span> <span class="n">Code</span> <span class="o">|</span> <span class="n">Message</span>                                                                                                                                                                                                                                                                               <span class="o">|</span>
<span class="o">+</span><span class="c1">-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="o">|</span> <span class="n">Note</span>  <span class="o">|</span> <span class="mi">1003</span> <span class="o">|</span> <span class="cm">/* select#1 */</span> <span class="k">select</span> <span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`id`</span> <span class="k">AS</span> <span class="nv">`id`</span><span class="p">,</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`name`</span> <span class="k">AS</span> <span class="nv">`name`</span><span class="p">,</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`age`</span> <span class="k">AS</span> <span class="nv">`age`</span><span class="p">,</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`contract_id`</span> <span class="k">AS</span> <span class="nv">`contract_id`</span><span class="p">,</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`join_on`</span> <span class="k">AS</span> <span class="nv">`join_on`</span> <span class="k">from</span> <span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span> <span class="k">where</span> <span class="p">(</span><span class="nv">`test`</span><span class="p">.</span><span class="nv">`teacher`</span><span class="p">.</span><span class="nv">`contract_id`</span> <span class="o">=</span> <span class="s1">'100400'</span><span class="p">)</span> <span class="o">|</span>
<span class="o">+</span><span class="c1">-------+------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+</span>
<span class="mi">1</span> <span class="k">row</span> <span class="k">in</span> <span class="k">set</span> <span class="p">(</span><span class="mi">0</span><span class="p">.</span><span class="mi">00</span> <span class="n">sec</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="misunderstanding-3-if-key-is-not-null-in-explain-statement-output-it-means-one-of-the-index-is-used-and-the-query-is-efficient">Misunderstanding 3: If <code class="language-plaintext highlighter-rouge">key</code> is not null in <code class="language-plaintext highlighter-rouge">EXPLAIN</code> statement output, it means one of the index is used and the query is efficient</h2>
<p>Yes, if the value of the <code class="language-plaintext highlighter-rouge">key</code> column is not null in <code class="language-plaintext highlighter-rouge">EXPLAIN</code> statement output, it means one of the index is used but it doesn’t mean an index is FULLY used.
To decide if a query is optimized, we need to analyze other columns like <code class="language-plaintext highlighter-rouge">key_len</code>. This column indicates the length of the key the optimizer decided to use with which you can tell how many parts of a composite index are used.
For example, suppose we have a table defined as below and the value for <code class="language-plaintext highlighter-rouge">key_len</code> is 4</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">`col1`</span> <span class="nb">char</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>                   <span class="c1">-- 1 byte</span>
<span class="nv">`col2`</span> <span class="nb">char</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span><span class="p">,</span>                   <span class="c1">-- 2 bytes</span>
<span class="nv">`col3`</span> <span class="nb">tinyint</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span><span class="p">,</span>        <span class="c1">-- 1 byte</span>
<span class="nv">`col4`</span> <span class="nb">tinyint</span><span class="p">(</span><span class="mi">4</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="k">DEFAULT</span><span class="p">,</span>        <span class="c1">-- 4 bytes</span>
<span class="k">KEY</span> <span class="nv">`Index`</span> <span class="p">(</span><span class="nv">`col1`</span><span class="p">,</span> <span class="nv">`col2`</span><span class="p">,</span> <span class="nv">`col3`</span><span class="p">,</span> <span class="nv">`col4`</span><span class="p">)</span>
</code></pre></div></div>
<p>Since indexes are used from left to right (leftmost prefix matching principle), only (<code class="language-plaintext highlighter-rouge">col1</code>, <code class="language-plaintext highlighter-rouge">col2</code>, <code class="language-plaintext highlighter-rouge">col3</code>) is used: 1+2+1=4.</p>

<p>In addition, when using <code class="language-plaintext highlighter-rouge">EXPLAIN</code> to analyze your query’s performance, be careful about the sample data you use - it may produce very different query plan result.</p>

<p><em>Reference</em>: Check out the full <code class="language-plaintext highlighter-rouge">EXPLAIN</code> output format via https://dev.mysql.com/doc/refman/8.0/en/explain-output.html.</p>

<h2 id="misunderstanding-4-the-order-of-columns-in-where-clause-matters-in-leftmost-prefix-principle-of-index">Misunderstanding 4: The order of columns in <code class="language-plaintext highlighter-rouge">WHERE</code> clause matters in leftmost prefix principle of index</h2>
<p>The truth is, it doesn’t. Only the order in the index matters.
<strong>TODO</strong></p>]]></content><author><name>Echocho</name></author><summary type="html"><![CDATA[Some Common Misunderstandings of MySQL]]></summary></entry><entry><title type="html">It all started from a CannotAcquireLockException…</title><link href="https://echocho.github.io/cat-alone/tech/2023/03/22/AcquireLockExcpetion-deadlock.html" rel="alternate" type="text/html" title="It all started from a CannotAcquireLockException…" /><published>2023-03-22T00:00:00+00:00</published><updated>2023-03-22T00:00:00+00:00</updated><id>https://echocho.github.io/cat-alone/tech/2023/03/22/AcquireLockExcpetion-deadlock</id><content type="html" xml:base="https://echocho.github.io/cat-alone/tech/2023/03/22/AcquireLockExcpetion-deadlock.html"><![CDATA[<h1 id="it-all-started-from-a-cannotacquirelockexception">It all started from a CannotAcquireLockException…</h1>

<p>One day a team member was working on a data migration service and when he triggered the migration he met the following error</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.springframework.dao.CannotAcquireLockException: Could not execute JDBC batch update; SQL [insert into abc_invoice (col1, col2) values ...
</code></pre></div></div>
<p>It wasn’t a hard question but a good one for us to reflect and review the concepts of deadlocks, transaction isolations, and how to troubleshoot related problems in MySQL.</p>

<h2 id="where-does-this-error-occur">Where does this error occur?</h2>
<p>Structure of the migration service looks like this:</p>

<p>controller –[calls]–&gt; migration scheduler –[sends]–&gt; listener –[calls]–&gt; migration helper service –[calls]–&gt; other services</p>

<p>The exception occurs in the following method in migration helper service</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">migrateOneDocument</span><span class="o">(</span><span class="nc">Boolean</span> <span class="n">reMigration</span><span class="o">,</span> <span class="nc">String</span> <span class="n">documentId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">reMigration</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">clearExistingRecords</span><span class="o">(</span><span class="n">documentId</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">doMigration</span><span class="o">(</span><span class="n">documentId</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="what-does-this-error-mean">What does this error mean?</h2>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.springframework.dao.CannotAcquireLockException: Could not execute JDBC batch update; SQL [insert into abc_invoice (col1, col2) values (?, ?)]; nested exception is org.hibernate.exception.LockAcquisitionException: Could not execute JDBC batch update
at org.springframework.orm.hibernate3.SessionFactoryUtils.convertHibernateAccessException(SessionFactoryUtils.java:651) ~[spring-orm-4.3.30.RELEASE.jar:4.3.30.RELEASE]
at org.springframework.orm.hibernate3.HibernateTransactionManager.convertHibernateAccessException(HibernateTransactionManager.java:800) ~[spring-orm-4.3.30.RELEASE.jar:4.3.30.RELEASE]
... more
...Caused by: org.hibernate.exception.LockAcquisitionException: Could not execute JDBC batch update
at org.hibernate.exception.SQLStateConverter.convert(SQLStateConverter.java:107) ~[hibernate-core-3.6.10.Final.jar:3.6.10.Final]
at org.hibernate.exception.JDBCExceptionHelper.convert(JDBCExceptionHelper.java:66) ~[hibernate-core-3.6.10.Final.jar:3.6.10.Final]
at org.hibernate.jdbc.AbstractBatcher.executeBatch(AbstractBatcher.java:275) ~[hibernate-core-3.6.10.Final.jar:3.6.10.Final]
at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:268) ~[hibernate-core-3.6.10.Final.jar:3.6.10.Final]
at org.hibernate.engine.ActionQueue.executeActions(ActionQueue.java:184) ~[hibernate-core-3.6.10.Final.jar:3.6.10.Final]
at org.hibernate.event.def.AbstractFlushingEventListener.performExecutions(AbstractFlushingEventListener.java:321) ~[hibernate-core-3.6.10.Final.jar:3.6.10.Final]
at org.hibernate.event.def.DefaultFlushEventListener.onFlush(DefaultFlushEventListener.java:51) ~[hibernate-core-3.6.10.Final.jar:3.6.10.Final]
at org.hibernate.impl.SessionImpl.flush(SessionImpl.java:1216) ~[hibernate-core-3.6.10.Final.jar:3.6.10.Final]
at org.springframework.orm.hibernate3.HibernateTransactionManager$HibernateTransactionObject.flush(HibernateTransactionManager.java:900) ~[spring-orm-4.3.30.RELEASE.jar:4.3.30.RELEASE]
... 45 more
Caused by: java.sql.BatchUpdateException: Lock wait timeout exceeded; try restarting transaction
at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[?:1.8.0_292]
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[?:1.8.0_292]
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[?:1.8.0_292]
at java.lang.reflect.Constructor.newInstance(Constructor.java:423) ~[?:1.8.0_292]
... 45 more
Caused by: com.mysql.cj.jdbc.exceptions.MySQLTransactionRollbackException: Lock wait timeout exceeded; try restarting transaction
at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:123) ~[mysql-connector-java-8.0.24.jar:8.0.24]
at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-java-8.0.24.jar:8.0.24]
at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953) ~[mysql-connector-java-8.0.24.jar:8.0.24]
at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1092) ~[mysql-connector-java-8.0.24.jar:8.0.24]
at com.mysql.cj.jdbc.ClientPreparedStatement.executeUpdateInternal(ClientPreparedStatement.java:1040) ~[mysql-connector-java-8.0.24.jar:8.0.24]
... 45 more
</code></pre></div></div>
<p>From the stack trace we know that it’s an exception thrown in Spring where it cannot acquire the lock it needs to insert data. In addition, there’s an error from MySQL JDBC level indicating that the lock wait time out exceeded, meaning this thread had been waiting until timeout but still didn’t get the lock.</p>

<h2 id="how-to-verify-the-cause">How to verify the cause?</h2>
<p>We can find information of every currently executing transaction inside InnoDB using <code class="language-plaintext highlighter-rouge">INNODB_TRX</code> table., such as if the transaction is started, if it is waiting for a lock, etc.
It’s more useful to join <code class="language-plaintext highlighter-rouge">INNODB_LOCKS</code> on <code class="language-plaintext highlighter-rouge">trx_requested_lock_id</code> and <code class="language-plaintext highlighter-rouge">lock_id</code>, to get details of the lock held and requested</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql&gt; select tnx.*, lck.* from INFORMATION_SCHEMA.INNODB_TRX tnx join INFORMATION_SCHEMA.INNODB_LOCKS lck on tnx.trx_requested_lock_id = lck.lock_id\G
*************************** 1. row ***************************
                    trx_id: 819311
                 trx_state: LOCK WAIT
               trx_started: 2023-03-20 09:47:09
     trx_requested_lock_id: 819311:4975:6:6
          trx_wait_started: 2023-03-20 09:47:28
                trx_weight: 3
       trx_mysql_thread_id: 12656
                 trx_query: insert into abc_invoice (col1, col2 ...
       trx_operation_state: inserting
         trx_tables_in_use: 1
         trx_tables_locked: 1
          trx_lock_structs: 2
     trx_lock_memory_bytes: 1136
           trx_rows_locked: 1
         trx_rows_modified: 1
   trx_concurrency_tickets: 0
       trx_isolation_level: REPEATABLE READ
         trx_unique_checks: 1
    trx_foreign_key_checks: 1
trx_last_foreign_key_error: NULL
 trx_adaptive_hash_latched: 0
 trx_adaptive_hash_timeout: 0
          trx_is_read_only: 0
trx_autocommit_non_locking: 0
                   lock_id: 819311:4975:6:6
               lock_trx_id: 819311
                 lock_mode: X,GAP
                 lock_type: RECORD
                lock_table: `repos`.`abc_invoice`
                lock_index: IDX_DOCUMENT_ID
                lock_space: 4975
                 lock_page: 6
                  lock_rec: 6
                 lock_data: '4028b2e986e9b1620186e9cc7351111', '4028b2e986fd478c0186fd54768a2222'     # id, uuid, primary key
1 row in set, 1 warning (0.00 sec)
</code></pre></div></div>

<p>From the query result above, we can see that our transaction is indeed waiting for the lock needed to insert data:
<code class="language-plaintext highlighter-rouge">trx_state: LOCK WAIT</code>, <code class="language-plaintext highlighter-rouge">trx_query: insert into abc_invoice (col1, col2...</code>, <code class="language-plaintext highlighter-rouge">trx_operation_state: inserting</code></p>

<p>The next step is to find out where the other transaction is and where it holds the lock for so long. With further analysis we realized the problem is the method call <code class="language-plaintext highlighter-rouge">doMigration(documentId, userId)</code> inside <code class="language-plaintext highlighter-rouge">migrateOneDocument(Boolean reMigration, String documentId, String userId)</code> because it actually starts a new transaction when it handles the actual migration logics. It reads something like</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">private</span> <span class="kt">void</span> <span class="nf">doMigration</span><span class="o">(</span><span class="nc">String</span> <span class="n">documentId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">handler</span><span class="o">.</span><span class="na">handle</span><span class="o">(</span><span class="n">documentId</span><span class="o">,</span> <span class="n">userId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Code in handler.java</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">String</span> <span class="n">documentId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="o">...</span>
        <span class="n">transactionHelper</span><span class="o">.</span><span class="na">runInNewTx</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">processItems</span><span class="o">(</span><span class="n">context</span><span class="o">,</span> <span class="n">itemId</span><span class="o">,</span> <span class="n">temItemIds</span><span class="o">);</span>
        <span class="o">})</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Recall <code class="language-plaintext highlighter-rouge">migrateOneDocument()</code> is annotated with <code class="language-plaintext highlighter-rouge">@Transactional</code>. At the beginning of this transaction is a delete statement like <code class="language-plaintext highlighter-rouge">delete from abc_invoice where user_id=xx and document_id=xx</code> (with index on (user_id, document_id)) where it locks one row (Step A). However, in the next step (Step B), <code class="language-plaintext highlighter-rouge">INSERT</code>, a new transaction is started. Step A is waiting Step B to finish so that the transaction Step A is in can be committed; while Step B is waiting for Step A to release the lock to proceed. Hence, the deadlock occurs.</p>

<h2 id="how-to-fix">How to fix?</h2>
<p>Either remove the <code class="language-plaintext highlighter-rouge">@Transactional</code> or don’t start a new transaction inside an existing transaction, as MySQL doesn’t support nested transactions.</p>

<h2 id="follow-up-questions">Follow-up questions</h2>
<h3 id="the-data-im-trying-to-insert-has-different-primary-keys-than-the-records-that-are-being-locked-to-delete-why-wont-mysql-allow-me-to-insert">The data I’m trying to insert has different primary keys than the records that are being locked to delete. Why won’t MySQL allow me to insert?</h3>
<p>[TODO]</p>]]></content><author><name>Echocho</name></author><category term="Tech" /><category term="MySQL" /><category term="troubleshooting" /><summary type="html"><![CDATA[A reflect and review the concepts of deadlocks, transaction isolations, and how to troubleshoot related problems in MySQL.]]></summary></entry></feed>